$break-small: 768px;
$break-medium: 992px;
$break-large: 1200px;

/**
 * Simplify media query
 *
 * @param {string} size (xs, sm, md, lg)
 * max-width -> <=
 * min-width -> >=
 */
@mixin media($media, $min-width: 320px, $max-width:1040px) {
  @if $media == xs {
    @media only screen and (max-width: $break-small - 1) {
      @content;
    }
  }
  @else if $media == sm {
    @media only screen and (min-width: $break-small) and (max-width: $break-medium - 1) {
      @content;
    }
  }
  @else if $media == md {
    @media only screen and (min-width: $break-medium) and (max-width: $break-large - 1) {
      @content;
    }
  }
  @else if $media == lg {
    @media only screen and (min-width: $break-large) {
      @content;
    }
  }
}

/**
 * Enhance fa_stacked_icon style by mixin
 *
 * @param {selector} fa icon name, require to add to class of fa_stacked_icon
 * @param {color} icon color
 * @param {color} background color
 */
@mixin fa-stacked-colors($selector, $bg-color, $color: white) {
  .fa-stack.#{$selector} {
    > .fa:first-child {
      color: $bg-color;
    }

    &:hover {
      > .fa:first-child {
        color: lighten($bg-color, 20%);
      }
    }

    .fa-#{$selector} {
      color: $color;
    }
  }
}

/**
 * Adjust fa-icon size
 *  unit: px, em, rem, etc...
 *
 * @param {selector} fa icon name
 * @param {unit} font size to change icon size
 */
@mixin fa-icon-size($selector, $size) {
  .fa-#{$selector} {
    font-size: $size;
  }
}

/**
 * Offset fa-icon position
 *
 * @param {selector} fa icon name
 * @param {number} x
 * @param {number} y
 */
@mixin fa-icon-offset($selector, $x: 0, $y: 0) {
  .fa-#{$selector} {
    position: relative;
    top: $x;
    left: $y;
  }
}

/**
 * Fit image
 */
@mixin image-fit {
  object-fit: cover;
  object-position: 50% 50%;
}

/**
 * Text truncate into one line
 */
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}


/**
 * clearfix
 */
@mixin clearfix {
  &:after, &:before {
    content: "";
    display: table;
  }
  &:after{
    clear:both;
  }
   *zoom:1;
}

// Sizing shortcuts
// -------------------------
@mixin size($height, $width) {
  width: $width;
  height: $height;
}
@mixin square($size) {
  @include size($size, $size);
}


@mixin vertical($startColor: #555, $endColor: #333) {
    background-color: mix($startColor, $endColor, 60%);
    background-image: -moz-linear-gradient(top, $startColor, $endColor); // FF 3.6+
    background-image: -ms-linear-gradient(top, $startColor, $endColor); // IE10
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
    background-image: -webkit-linear-gradient(top, $startColor, $endColor); // Safari 5.1+, Chrome 10+
    background-image: -o-linear-gradient(top, $startColor, $endColor); // Opera 11.10
    background-image: linear-gradient(top, $startColor, $endColor); // The standard
    background-repeat: repeat-x;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",$startColor,$endColor)); // IE9 and down
}

@mixin transition($transition) {
  -webkit-transition: $transition;
     -moz-transition: $transition;
      -ms-transition: $transition;
       -o-transition: $transition;
          transition: $transition;
}

// Transformations
@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
     -moz-transform: rotate($degrees);
      -ms-transform: rotate($degrees);
       -o-transform: rotate($degrees);
          transform: rotate($degrees);
}

@mixin animation($key,$t,$e,$loop,$dir){
	-webkit-animation: $key $t $e $loop $dir;
	-moz-animation: $key $t $e $loop $dir;
	-ms-animation: $key $t $e $loop $dir;
	-o-animation: $key $t $e $loop $dir;
	animation: $key $t $e $loop $dir;
}
